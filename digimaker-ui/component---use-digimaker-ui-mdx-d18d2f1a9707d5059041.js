(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{ab4X:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return p})),n.d(t,"default",(function(){return m}));var i=n("Fcif"),a=n("+I+c"),o=(n("mXGw"),n("/FXl")),r=n("TjRS"),c=n("5hvn"),s=(n("aD51"),["components"]),p={};void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!Object.prototype.hasOwnProperty.call(p,"__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"UseDigimakerUI.mdx"}});var l={_frontmatter:p},d=r.a;function m(e){var t=e.components,n=Object(a.a)(e,s);return Object(o.b)(d,Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"use-digimaker-ui"},"Use digimaker-ui"),Object(o.b)("h2",{id:"setting-up"},"Setting up"),Object(o.b)("h3",{id:"env"},".env"),Object(o.b)("p",null,"Before using, you need to set up env variables. Below is an example of .env file"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"REACT_APP_REMOTE_URL=/api\nREACT_APP_ASSET_URL=http://localhost:9200/var\n#imagepath will be replaced by the real image path\nREACT_APP_THUMB_PATH=images/thumbnail/{imagepath}\n")),Object(o.b)("h3",{id:"dminit"},"DMInit"),Object(o.b)("p",null,"All digimaker-ui's components should be inside DMInit(doesn't need to direct under). See properties of ",Object(o.b)("a",{parentName:"p",href:"../DMInit"},"DMInit")," for different uses."),Object(o.b)(c.a,{type:"info",variant:"outer",mdxType:"Hint"},"You don't need DMInit if you only need to use rest api instead of component like List/Browse."),Object(o.b)("h2",{id:"use-components"},"Use components"),Object(o.b)("p",null,"You can use digimaker-ui compoents separately(eg. list & actions, browse, etc) or build a whole admin from it."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'//List article under 3, with actions\n<List id={3} contenttype="article" columns={["name", "published"]} \n    row_actions={[{link:"/view/{id}", name:\'View\'}, (props)=><Add ..props />]} />\n\n//browse all images\n<Browse contenttype="image" onConfirm={(selected)=>{}} />\n\n//Show content tree\n<TreeNode root={3} contenttype={["folder", "usergroup"]} />\n')),Object(o.b)("h2",{id:"build-editorialadmin-ui"},"Build editorial/admin ui"),Object(o.b)("p",null,"Using routing is a good approach because url path gives great flexiablilty."),Object(o.b)("p",null,"It's a good idea to create a general component&route showing a content(call it ",Object(o.b)("inlineCode",{parentName:"p"},"Main"),", with path eg. /main/3)."),Object(o.b)("p",null,"See ",Object(o.b)("a",{parentName:"p",href:"./"},"dmdemo admin as example")),Object(o.b)("h3",{id:"route"},"Route"),Object(o.b)("p",null,"First we register all Main component like path /main/4"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"//App.tsx\n<div>\n<div>{/*Left menu*/}</div>\n<Route\n    path='/main/:id'\n    exact={true}\n    render={(route) => (\n        <Main\n            onLoad={(content)=>{          \n                setCurrent(content);\n            }}                                          \n            id={parseInt(route.match.params.id)}\n            getMainConfig={getMainConfig}\n            getListConfig={getListConfig}\n            redirect={(url: string) =>\n                commonAfterAction(route.history, 0, [url])}\n        />\n    )}\n/>\n</div>\n")),Object(o.b)("h3",{id:"main-component"},"Main component"),Object(o.b)("p",null,"In the Main component, it will fetch content based on id, and shows list of children based on configuration. digimaker-ui provides a default ",Object(o.b)("a",{parentName:"p",href:"./Main"},"Main")," component, which list all content list from up to down, but you can customized your own(eg. different content types list shown as tabs)."),Object(o.b)("h3",{id:"configuration-for-main"},"Configuration for Main"),Object(o.b)("p",null,"The configiguration sets rule of showing lists and each list's column, sorting, actions etc. "),Object(o.b)(c.a,{type:"info",variant:"outer",mdxType:"Hint"},"It's easy to show list based on parent's fields, eg. showing article if parent's `children_type` is article."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"//main settings\nconst mainConfig = {\n    folder: {\n      actions: [\n        (actionProps:ActionProps)=><SetPriority {...actionProps} />\n      ]\n    },    \n    article: {\n      view: true,\n      metainfo:true,\n      actions: [      \n        (actionProps:ActionProps)=><Move {...actionProps} />\n      ],\n    },\n    user: {\n      view: true,\n      viewComponent: UserRoles,    \n    },\n  };\n\nconst getMainConfig =(content:any)=>{\n    return mainConfig[content.content_type]\n}\n\n\n//list settings\nconst getListConfig = (_parent: any, contenttype: string)=>{\n  const commonSettings = {\n    show_header: true,\n    show_table_header: true,\n    pagination: 10,\n    sort:[],\n    row_actions: [\n      {\n        link: '/edit/{_contenttype_id}?from=/main/{_from_id}',\n        name: 'Edit',\n        icon: 'icon-edit',\n      },\n      (actionProps:ActionProps)=><Delete {...actionProps} />\n    ]\n  }\n  return commonSettings;\n}\n")),Object(o.b)("h3",{id:"actions-editcreate"},"Actions: edit/create"),Object(o.b)("p",null,"There are typically 2 ways to achieve edit/create, url or dialog. Below is an example of routing path ",Object(o.b)("inlineCode",{parentName:"p"},"/create/{parent}/{contenttype}")," to create."),Object(o.b)("p",null,"For dialog-like action, you can ",Object(o.b)("a",{parentName:"p",href:"./actions/Implement"},"implement your own action")," wraps of our ",Object(o.b)("inlineCode",{parentName:"p"},"Create"),"/",Object(o.b)("inlineCode",{parentName:"p"},"Edit")," component in dialog, and then register the action in list row, or other places."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'import Create from \'digimaker-ui/actions/Create\';\nimport Edit from \'digimaker-ui/actions/Edit\';\n\n//...\n<Route path="/create/:parent/:contenttype" render={route=>\n    <Create key={Date.now()} parent={parseInt(route.match.params.parent)} \n    contenttype={route.match.params.contenttype} \n     afterAction={(status, params)=>redirect(route.history, params)} />} />\n<Route path="/edit/:contenttype/:id" exact render={route=>\n    <Edit id={parseInt(route.match.params.id)} contenttype={route.match.params.contenttype}\n     afterAction={(status, params)=>redirect(route.history, params)} />} />\n<Route path="/edit/:id" exact render={route=><Edit id={parseInt(route.match.params.id)} \n        afterAction={(status, params)=>redirect(route.history, params)} />} />\n')))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!Object.prototype.hasOwnProperty.call(m,"__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"UseDigimakerUI.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---use-digimaker-ui-mdx-d18d2f1a9707d5059041.js.map