{"version":3,"sources":["webpack:///../UseDigimakerUI.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","type","variant","isMDXComponent"],"mappings":"iSASaA,EAAe,Q,0NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,oBADR,oBAGA,kBACE,GAAM,cADR,cAGA,kBACE,GAAM,OADR,QAGA,yGACA,uBAAK,oBAAMC,WAAW,OAAjB,sLAKL,kBACE,GAAM,UADR,UAGA,+HAA8G,iBAAGA,WAAW,IACxH,KAAQ,aADkG,UAA9G,wBAGA,kBACE,GAAM,kBADR,kBAGA,uIACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,2WAYL,kBACE,GAAM,2BADR,4BAGA,oGACA,uGAAsF,0BAAYA,WAAW,KAAvB,QAAtF,6BACA,4BAAW,iBAAGA,WAAW,IACrB,KAAQ,MADD,4BAGX,kBACE,GAAM,SADR,SAGA,+EACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,wGAQL,kBACE,GAAM,kBADR,kBAGA,qIACA,YAAC,IAAD,CAAMC,KAAK,OAAOC,QAAQ,QAAQH,QAAQ,QAA1C,2IAGA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,eADZ,0gBAuBL,kBACE,GAAM,eADR,eAGA,sHACA,YAAC,IAAD,CAAMC,KAAK,OAAOC,QAAQ,QAAQH,QAAQ,QAA1C,gHAGA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,eADZ,8YAoBL,kBACE,GAAM,cADR,eAGA,8HAA6G,0BAAYA,WAAW,KAAvB,kCAA7G,eACA,wDAAuC,iBAAGA,WAAW,IACjD,KAAQ,uBAD2B,6BAAvC,iBAEwD,0BAAYA,WAAW,KAAvB,UAFxD,IAE+G,0BAAYA,WAAW,KAAvB,QAF/G,oFAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,kxB,wNAoBTJ,EAAWO,gBAAiB","file":"component---use-digimaker-ui-mdx-7bf9b73fc178a9d9d630.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/xc/dev/digimaker-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Hint } from '@nejcm/docz-theme-extended';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"use-digimaker-ui\"\n    }}>{`Use digimaker-ui`}</h1>\n    <h2 {...{\n      \"id\": \"setting-up\"\n    }}>{`Setting up`}</h2>\n    <h3 {...{\n      \"id\": \"env\"\n    }}>{`.env`}</h3>\n    <p>{`Before using, you need to set up env variables. Below is an example of .env file`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`REACT_APP_REMOTE_URL=/api\nREACT_APP_ASSET_URL=http://localhost:9200/var\n#imagepath will be replaced by the real image path\nREACT_APP_THUMB_PATH=images/thumbnail/{imagepath}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dminit\"\n    }}>{`DMInit`}</h3>\n    <p>{`All digimaker-ui's components should be inside DMInit(doesn't need to direct under). See properties of `}<a parentName=\"p\" {...{\n        \"href\": \"../DMInit\"\n      }}>{`DMInit`}</a>{` for different uses.`}</p>\n    <h2 {...{\n      \"id\": \"use-components\"\n    }}>{`Use components`}</h2>\n    <p>{`You can use digimaker-ui compoents separately(eg. list & actions, browse, etc) or build a whole admin from it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//List article under 3, with actions\n<List id={3} contenttype=\"article\" columns={[\"name\", \"published\"]} \n    row_actions={[{link:\"/view/{id}\", name:'View'}, (props)=><Add ..props />]} />\n\n//browse all images\n<Browse contenttype=\"image\" onConfirm={(selected)=>{}} />\n\n//Show content tree\n<TreeNode root={3} contenttype={[\"folder\", \"usergroup\"]} />\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"build-editorialadmin-ui\"\n    }}>{`Build editorial/admin ui`}</h2>\n    <p>{`Using routing is a good approach because url path gives great flexiablilty.`}</p>\n    <p>{`It's a good idea to create a general component&route showing a content(call it `}<inlineCode parentName=\"p\">{`Main`}</inlineCode>{`, with path eg. /main/3).`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"./\"\n      }}>{`dmdemo admin as example`}</a></p>\n    <h3 {...{\n      \"id\": \"route\"\n    }}>{`Route`}</h3>\n    <p>{`First we register all Main component like path /main/4`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//App.tsx\n<div>\n<div>{/*Left menu*/}</div>\n<Route path=\"/main/:id\" component={Main} />\n</div>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"main-component\"\n    }}>{`Main component`}</h3>\n    <p>{`In the Main component, it will fetch content based on id, and shows list of children based on configuration.`}</p>\n    <Hint type=\"info\" variant=\"outer\" mdxType=\"Hint\">\nYou can add actions above lists(even if every list has its actions), show content, or add side action. Also you can show lists as tabs.\n    </Hint>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Main.tsx\nimport Config from './Config';\n\nconst Main = (props)=>{\n    const location = useLocation();\n    const [content, setContent] = '';\n\n    useEffect(() => {\n    util.FetchByID(props.match.params.id).then(data=>setContent(data));\n  }, [location]);\n\n\n    if(!content){\n        return <div>Loading</div>\n    }\n    return <div>\n        {Config.listTypes(content).map((contenttype)=>\n            <List id={content.id} contenttype={contenttype} {...Config.listConfig(content)} /> )}\n    </div>\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"config-file\"\n    }}>{`Config file`}</h3>\n    <p>{`The config file will set rule of showing lists and each list's column, sorting, actions etc. `}</p>\n    <Hint type=\"info\" variant=\"outer\" mdxType=\"Hint\">\nIt's easy to show list based on parent's fields, eg. showing article if parent's `children_type` is article.\n    </Hint>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Config.ts\nconst Config = {\n    listTypes: (content)=>{\n        if( content.content_type == 'folder' ){\n            return [\"article\"];\n        }\n        return [\"folder\"];\n    },\n    listConfig: (content)=>{\n        return {           \n            actions:[], //action above list \n            columns: [ 'name', 'published' ],\n        }\n    }\n},\n\nexport default Config;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"editcreate\"\n    }}>{`Edit/Create`}</h3>\n    <p>{`There are typically 2 ways to achieve edit/create, url or dialog. Below is an example of routing path `}<inlineCode parentName=\"p\">{`/create/{parent}/{contenttype}`}</inlineCode>{` to create.`}</p>\n    <p>{`For dialog-like action, you can `}<a parentName=\"p\" {...{\n        \"href\": \"./actions/Implement\"\n      }}>{`implement your own action`}</a>{` wraps of our `}<inlineCode parentName=\"p\">{`Create`}</inlineCode>{`/`}<inlineCode parentName=\"p\">{`Edit`}</inlineCode>{` component in dialog, and then register the action in list row, or other places.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Create from 'digimaker-ui/actions/Create';\nimport Edit from 'digimaker-ui/actions/Edit';\n\n//...\n<Route path=\"/create/:parent/:contenttype\" render={route=>\n    <Create key={Date.now()} parent={parseInt(route.match.params.parent)} \n    contenttype={route.match.params.contenttype} \n     afterAction={(status, params)=>redirect(route.history, params)} />} />\n<Route path=\"/edit/:contenttype/:id\" exact render={route=>\n    <Edit id={parseInt(route.match.params.id)} contenttype={route.match.params.contenttype}\n     afterAction={(status, params)=>redirect(route.history, params)} />} />\n<Route path=\"/edit/:id\" exact render={route=><Edit id={parseInt(route.match.params.id)} \n        afterAction={(status, params)=>redirect(route.history, params)} />} />\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}